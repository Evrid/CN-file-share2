@model Document

@{
    ViewData["Title"] = "Index";
}

<h1>搜索索引</h1>

<div class="row">
    <div class="col-md-4">
        <form id="searchDocumentForm" enctype="multipart/form-data">

            <div class="form-group">
                <label asp-for="SchoolID" class="control-label">请输入并选择大学名称：</label>
                <input type="text" id="schoolInput" class="form-control" autocomplete="off" list="universityList" required />
                <datalist id="universityList"></datalist>
                <input type="hidden" asp-for="SchoolID" />
            </div>

            <div class="form-group">
                <label asp-for="CourseID" class="control-label">请输入并选择课程名称：</label>
                <input type="text" id="courseInput" class="form-control" autocomplete="off" list="courseList" required placeholder="选择大学后才能搜索并选择课程"  disabled />
                <!-- disabled，除非先从“schoolInput”中选择 -->
                <datalist id="courseList"></datalist>
                <input type="hidden" asp-for="CourseID" />
            </div>

            <div>
                <label for="textInput">要搜索的文件名：</label>
                <input type="text" id="textInput" name="textInput" required>
            </div>

            <div class="form-group">
                <input type="submit" value="搜索" class="btn btn-primary" />
            </div>
        </form>

        <div style="height: 100px"></div>

        <div id="searchResultsSection" style="display: none;">
            <h2>搜索结果</h2>
            <table class="table" style="border: 1px solid black;">
                <thead>
                    <tr>
                        <th class="border-cell">名称和预览</th>
                        <th class="border-cell">课程</th>
                        <th class="border-cell">大学</th> 
                        <th class="border-cell">年份</th>
                        <th class="border-cell">类别</th>
                        <th class="border-cell">描述</th>
                        <th class="border-cell">评分</th>
                    </tr>
                </thead>
                <tbody id="searchResultsBody">
                    <!-- 搜索结果将动态添加在这里 -->
                </tbody>
            </table>

        </div>
    </div>

    <div class="col-md-6 col-md-offset-2">
        <p>现有课程：</p>

        <p>
            <strong>上海大学：</strong><br>
            数据库<br>
            数学分析
        </p>

      @*  <p>
            <strong>上海科技大学：</strong><br>
            物理<br>
            航空航天工程
        </p>*@

        <p>每门课程我们都有一份“<strong>讲义</strong>”和一份“<strong>作业</strong>”。</p>
        <p>在搜索时，请使用上述信息，如“<strong>上海大学</strong>”、“<strong>数据库</strong>”、“<strong>作业</strong>”。</p>
    </div>

</div>



@section Scripts {

 



    <script>
        //For university
        const inputElement = document.getElementById('schoolInput');
        const datalistElement = document.getElementById('universityList');
        const hiddenInput = document.querySelector('input[type="hidden"][name="SchoolID"]');
        // When the user selects an option from the datalist, the corresponding value is set to the hidden input field (hiddenInput.value = selectedValue). This means that when the form is submitted, the value of the hidden input field will be included in the form data

        var SelectedSchoolID;   //for select course only in the university



        inputElement.addEventListener('input', function () {
            const inputText = inputElement.value.trim();
            if (inputText.length === 0) {
                datalistElement.innerHTML = ''; // Clear the datalist if the input is empty
                return; // exit the function
            }

            //  console.log(inputText);   //works well
            getUniversities(inputText);

        });


      
    </script>


    <script>
        //undisable "course" selection when the user has selected something from "university"

        document.getElementById('schoolInput').addEventListener('input', function () {
            //The "change" event listener will be triggered when the user selects an option from a dropdown, but not when they simply enter text in the input field (we use "input" if we want to detect if the user entered something).
            //if "change" doesn't work, try "input"
            var firstInputValue = this.value;
            console.log(firstInputValue);
            var secondInput = document.getElementById('courseInput');

            if (firstInputValue.length >= 4 && firstInputValue.includes('(') && firstInputValue.includes(')')) {
                secondInput.disabled = false;
            } else {
                secondInput.disabled = true;
            }


        });

    </script>


    <script>
        //For courses

        const inputElement2 = document.getElementById('courseInput');
        const datalistElement2 = document.getElementById('courseList');
        const hiddenInput2 = document.querySelector('input[type="hidden"][name="CourseID"]');
        // When the user selects an option from the datalist, the corresponding value is set to the hidden input field. This means that when the form is submitted, the value of the hidden input field will be included in the form data


        inputElement2.addEventListener('input', function () {
            const inputText2 = inputElement2.value.trim();
            if (inputText2.length === 0) {
                datalistElement2.innerHTML = ''; // Clear the datalist if the input is empty
                return;
            }

            //  console.log(inputText);   //works well
            getCourses(inputText2);

        });

        
    </script>


    <script>
        //ask user must select from datalist of courseList
        document.querySelector('form').addEventListener('submit', function (event) {
            var input = document.getElementById('courseInput');
            var options = document.getElementById('courseList').options;
            var value = input.value;

            var match = Array.from(options).find(function (option) {
                return option.value === value;
            });

            if (!match) {
                event.preventDefault(); // Prevent form submission
                alert('从列表中选择有效的大学后，从列表中选择有效的课程选项。');
            }
        });

    </script>





    <script>
     

        //AJAX doesn't work in Azure, we must use javascript
        //document.getElementById("searchDocumentForm").addEventListener("submit", function (event) {

        document.querySelector('input[type="submit"]').addEventListener('click', function (event) {


            var input = document.getElementById('courseInput');
            var options = document.getElementById('courseList').options;
            var value = input.value;

            var match = Array.from(options).find(function (option) {
                return option.value === value;
            });

            if (!match) {
                event.preventDefault(); // Prevent form submission
                alert('从列表中选择有效的大学后，请从列表中选择有效的课程选项。');
            }
            //event.preventDefault(); // Prevent the form from submitting and page reloading

            else {
                event.preventDefault();
            // Get the search input values
            var textInput = document.getElementById("textInput").value;
            console.log ("now goes inside else, log school and course");
                console.log(hiddenInput.value);
                console.log(hiddenInput2.value);
            // Perform AJAX request to get search results





            fetch("/Search/Search?SchoolID=" + hiddenInput.value + "&CourseID=" + hiddenInput2.value + "&textInput=" + encodeURIComponent(textInput))
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error('Network response was not ok.');
                    }
                })
                .then(searchResults => {
                    console.log(' searchResults:', searchResults);

                    // Update the search results section with the received data
                    var searchResultsBody = document.getElementById("searchResultsBody");
                    searchResultsBody.innerHTML = ""; // Clear previous results

                    if (searchResults.length > 0) {
                        // Display search results
                        searchResults.forEach(function (result) {
                            var row = document.createElement("tr");
                                    row.classList.add("border-cell");

                            var nameCell = document.createElement("td");
                                    nameCell.classList.add("border-cell");
                            var link = document.createElement("a");
                            link.href = "/Document/docview/" + result.universityName + "/" + result.courseName + "/" + result.name + "/" + result.documentID;
                            link.textContent = result.name;
                            
                              link.target = "_blank"; // This line makes the link open in a new tab
 

                            nameCell.appendChild(link);
                            nameCell.classList.add("hyperlink"); // Add a CSS class for styling if desired
                            row.appendChild(nameCell);





                                var courseCell = document.createElement("td");
                                        courseCell.classList.add("border-cell");
                            var link = document.createElement("a");
                                link.href = "/Course/Courseview/?schoolName=" + result.universityName + "&courseName=" + result.courseName+"&courseID=" + result.courseID;
                            link.textContent = result.courseName;
                              link.target = "_blank"; // This line makes the link open in a new tab
                            courseCell.appendChild(link);
                            courseCell.classList.add("hyperlink"); // Add a CSS class for styling if desired
                            row.appendChild(courseCell);





                                var universityCell = document.createElement("td");
                                universityCell.classList.add("border-cell");
                                var link = document.createElement("a");
                                link.href = "/University/UniversityView/?schoolID=" + result.schoolID + "&schoolName=" + result.universityName + "&schoolLocation=" + result.universityLocation;
                                link.textContent = result.universityName;
                                console.log(result);
                                link.target = "_blank"; // This line makes the link open in a new tab
                                universityCell.appendChild(link);
                                universityCell.classList.add("hyperlink"); // Add a CSS class for styling if desired
                                row.appendChild(universityCell);




                                var image = document.createElement("img");
                                                        var originalLink = result.firstPageImageLink;
                                                        var imageURL = originalLink.replace(/^http:/, 'https:');   //we must use it because we need all https link, otherwise won't work

                                console.log("image url:");
                                                          console.log(imageURL);
                                                    //   var imageURL = "https://pdffirstpageimage.oss-eu-central-1.aliyuncs.com/693438484?Expires=4844246788&OSSAccessKeyId=LTAI5tHfC1uRSqRZswqEo5EQ&Signature=f2YXlcI11LUgJanyED980Eq8D3w%3D"; // Replace with the URL of the byte array
                                                          // Fetch the byte array from the URL
                                                        fetch(imageURL)
                                                            .then(response => response.arrayBuffer())
                                                            .then(buffer => {
                                                                // Convert byte array to base64-encoded image data
                                                                var byteArray = new Uint8Array(buffer);
                                                                var binaryData = [];
                                                                for (var i = 0; i < byteArray.byteLength; i++) {
                                                                    binaryData.push(byteArray[i]);
                                                                }
                                                                var base64Data = btoa(String.fromCharCode.apply(null, binaryData));

                                                                image.src = "data:image/png;base64," + base64Data;

                                                                // Adjust the size of the displayed image
                                                                image.style.width = "200px"; // Set the desired width
                                                                image.style.height = "auto"; // Set height to "auto" for aspect ratio to be preserved

                                                                nameCell.appendChild(image);

                                                            })
                                                            .catch(error => {
                                                                console.error("Failed to fetch or convert the byte array:", error);
                                                            });






                            var yearCell = document.createElement("td");
                                    yearCell.classList.add("border-cell");
                            yearCell.textContent = result.year;
                            row.appendChild(yearCell);

                            var categoryCell = document.createElement("td");
                                    categoryCell.classList.add("border-cell");
                            var categoryValue = result.category;

                                switch (categoryValue) {
                                    case 0:
                                        categoryCell.textContent = "讲义";
                                        break;
                                    case 1:
                                        categoryCell.textContent = "练习材料";
                                        break;
                                    case 2:
                                        categoryCell.textContent = "课程作业";
                                        break;
                                    case 3:
                                        categoryCell.textContent = "摘要";
                                        break;
                                    case 4:
                                        categoryCell.textContent = "作业";
                                        break;
                                    case 5:
                                        categoryCell.textContent = "教程作业";
                                        break;
                                    case 6:
                                        categoryCell.textContent = "论文";
                                        break;
                                    case 7:
                                        categoryCell.textContent = "其他";
                                        break;
                                    default:
                                        categoryCell.textContent = "未知类别";
                                        break;
                                }


                            row.appendChild(categoryCell);


                            var descriptionCell = document.createElement("td");
                                    descriptionCell.classList.add("border-cell");
                            descriptionCell.textContent = result.description;
                            row.appendChild(descriptionCell);

                            var ratingCell = document.createElement("td");
                                    ratingCell.classList.add("border-cell");
                            if (result.rating == null) {
                                ratingCell.textContent = "none"
                            } else {
                                ratingCell.textContent = result.rating + "%";
                            }
                            row.appendChild(ratingCell);

                            searchResultsBody.appendChild(row);
                        });

                        // Show the search results section
                        document.getElementById("searchResultsSection").style.display = "block";
                    } else {
                        // No results found
                        searchResultsBody.innerHTML = "<tr><td colspan='2'>No results found.</td></tr>";
                        document.getElementById("searchResultsSection").style.display = "block";
                    }
                })
                .catch(error => {
                    console.error("There has been a problem with your fetch operation: ", error);
                });
            }
        });



    </script>








    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
        //used to generate HTML dynamically on the server-side, the code is rendering the "_ValidationScriptsPartial" partial view and waiting for its completion using the await keyword
    }


}